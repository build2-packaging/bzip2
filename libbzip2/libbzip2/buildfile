intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import impl_libs += libhello%lib{hello}

lib{bzip2}: {h c}{** -version} h{version} $impl_libs $intf_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
h{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cc.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: cc.poptions += #-DLIBBZIP2_STATIC_BUILD
objs{*}: cc.poptions += #-DBZ_EXPORT

if($c.class == 'gcc' && $c.target.class != 'windows')
{
  objs{*}: cc.poptions += -fpic -fPIC
}

# Export options.
#
lib{bzip2}:
{
  cc.export.poptions = "-I$out_root" "-I$src_root" "-I$src_base"
  cc.export.libs = $intf_libs
}

liba{bzip2}: cc.export.poptions += #-DLIBBZIP2_STATIC
libs{bzip2}: cc.export.poptions += -DBZ_IMPORT

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{bzip2}: bin.lib.version = @"-$version.project_id"
else
  lib{bzip2}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libbzip2/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{h}{*} :
{
  install         = include/libbzip2/
  install.subdirs = true
}
h{bzlib}@./ :
{
  install = include/
}

h{bzlib_private}@./ :
{
  install = false
}
